---
description: 
globs: 
alwaysApply: true
---
# Testing Workflow Rule

- **Run Tests Frequently:**
  - Execute tests after implementing significant features or components.
  - Run tests after fixing bugs.
  - **Crucially, always run tests immediately after attempting to fix a previous test failure to verify the fix.**

- **Command:**
  - Use the project's configured test command.
  - For this project (drone-dashboard), the command is typically `deno task test` executed within the `frontend/` directory.
  - Ensure you are in the correct directory (`frontend/`) before running the command.

- **Analyze Failures:**
  - If tests fail, carefully read the error messages and stack traces provided by the test runner.
  - Identify the specific test(s) that failed and the assertion or error causing the failure.
  - Analyze the component or function under test and the test logic itself.

- **Iterative Fixing:**
  - Apply targeted fixes based on the failure analysis.
  - **Re-run the tests immediately after applying a potential fix.**
  - If tests still fail, re-analyze the output and try a different approach. Avoid making random changes.

- **Proactive Testing (AI Assistant):**
  - As the AI assistant, **you should proactively run the test command yourself** after making code changes intended to fix test failures.
  - Do not ask the user to run the tests for you in this scenario; verify your own fixes.
  - Report the results of the test run back to the user.

- **Context is Key:**
  - Consider the specific context (e.g., Deno environment, React testing library, Jotai state management) when debugging test failures.
  - Refer to relevant testing documentation (like [`deno-testing-guide.md`](mdc:docs/deno-testing-guide.md)) for patterns and best practices.
