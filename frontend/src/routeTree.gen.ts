/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// deno-lint-ignore-file

// deno-fmt-ignore-file

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root.tsx'
import { Route as LoginRouteImport } from './routes/login.tsx'
import { Route as AdminRouteImport } from './routes/admin.tsx'
import { Route as IndexRouteImport } from './routes/index.tsx'
import { Route as AdminIndexRouteImport } from './routes/admin/index.tsx'
import { Route as AdminToolsRouteImport } from './routes/admin/tools.tsx'
import { Route as AdminSettingsRouteImport } from './routes/admin/settings.tsx'
import { Route as AdminKvRouteImport } from './routes/admin/kv.tsx'
import { Route as AdminIngestRouteImport } from './routes/admin/ingest.tsx'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard.tsx'
import { Route as AdminControlRouteImport } from './routes/admin/control.tsx'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminToolsRoute = AdminToolsRouteImport.update({
  id: '/tools',
  path: '/tools',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminKvRoute = AdminKvRouteImport.update({
  id: '/kv',
  path: '/kv',
  getParentRoute: () => AdminRoute,
} as any)
const AdminIngestRoute = AdminIngestRouteImport.update({
  id: '/ingest',
  path: '/ingest',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminControlRoute = AdminControlRouteImport.update({
  id: '/control',
  path: '/control',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/control': typeof AdminControlRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/ingest': typeof AdminIngestRoute
  '/admin/kv': typeof AdminKvRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/tools': typeof AdminToolsRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/control': typeof AdminControlRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/ingest': typeof AdminIngestRoute
  '/admin/kv': typeof AdminKvRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/tools': typeof AdminToolsRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/control': typeof AdminControlRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/ingest': typeof AdminIngestRoute
  '/admin/kv': typeof AdminKvRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/tools': typeof AdminToolsRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/control'
    | '/admin/dashboard'
    | '/admin/ingest'
    | '/admin/kv'
    | '/admin/settings'
    | '/admin/tools'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/control'
    | '/admin/dashboard'
    | '/admin/ingest'
    | '/admin/kv'
    | '/admin/settings'
    | '/admin/tools'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/control'
    | '/admin/dashboard'
    | '/admin/ingest'
    | '/admin/kv'
    | '/admin/settings'
    | '/admin/tools'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/tools': {
      id: '/admin/tools'
      path: '/tools'
      fullPath: '/admin/tools'
      preLoaderRoute: typeof AdminToolsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/kv': {
      id: '/admin/kv'
      path: '/kv'
      fullPath: '/admin/kv'
      preLoaderRoute: typeof AdminKvRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/ingest': {
      id: '/admin/ingest'
      path: '/ingest'
      fullPath: '/admin/ingest'
      preLoaderRoute: typeof AdminIngestRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/control': {
      id: '/admin/control'
      path: '/control'
      fullPath: '/admin/control'
      preLoaderRoute: typeof AdminControlRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminControlRoute: typeof AdminControlRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminIngestRoute: typeof AdminIngestRoute
  AdminKvRoute: typeof AdminKvRoute
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminToolsRoute: typeof AdminToolsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminControlRoute: AdminControlRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminIngestRoute: AdminIngestRoute,
  AdminKvRoute: AdminKvRoute,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminToolsRoute: AdminToolsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
